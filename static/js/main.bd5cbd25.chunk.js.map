{"version":3,"sources":["component/title.js","component/counter.js","component/form.js","component/table.js","App.js","serviceWorker.js","index.js"],"names":["Title","class","className","Component","Counter","type","name","value","this","props","onChange","Form","onSubmit","ondynamic","Table","PtoG","p","style","display","data","map","g","index","grade","credit","colspan","spi","percentage","App","state","count","displaymsg","ing","inc","ongradeChange","e","target","push","setState","oncreditChange","isNaN","alert","oncounterChange","handlesubmit","preventDefault","length","gi","c","parseInt","ci","i","toFixed","dynamic","frm","final","Fragment","gradesubi","init","subcrediti","handleCreate","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd5cbd25.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nclass Title extends Component\r\n{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div class=\"row\">\r\n   \t\t\t\t <div className=\"com-md-12\">\r\n    \t\t\t\t<h1>SPI Calculater</h1>\r\n    \t\t\t\t<p>Enter Number of subject and then select grade for your subject and credit for subject</p>\r\n    \t\t\t</div>\r\n    \t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\nexport default Title;","import React,{Component} from 'react';\r\nclass Counter extends Component\r\n{\r\n\trender(){\r\n\t\treturn(\r\n\t<div className=\"row\">\r\n    <div className=\"com-md-2\">    \r\n    <div className=\"form-group\">\r\n    <label>Number of subject</label>\r\n    <input type=\"text\" name=\"count\" value={this.props.value} onChange={this.props.onChange} className=\"form-control\"/>\r\n    </div>\r\n    </div>\r\n    </div>\r\n\t\t\t)\r\n\t}\r\n}\r\nexport default Counter;","import React,{Component} from 'react';\r\nclass Form extends Component\r\n{\r\n\trender(){\r\n\t\treturn(\r\n\t <div className=\"row\">\r\n    <div className=\"com-md-12\">\r\n    \r\n    <form onSubmit={this.props.onSubmit}>\r\n    <div className=\"row\">\r\n    {this.props.ondynamic()}\r\n    </div>\r\n    </form>\r\n    </div>\r\n    </div>\r\n\t\t\t)\r\n\t}\r\n}\r\nexport default Form;","import React,{Component} from 'react';\r\nclass Table extends Component\r\n{\r\n\t PtoG = (p) =>{\r\n    if(p==10)\r\n    {\r\n      return \"AA\"\r\n    }\r\n    if(p==9)\r\n    {\r\n      return \"AB\"\r\n    }\r\n    if(p==8)\r\n    {\r\n      return \"BB\"\r\n    }\r\n    if(p==7)\r\n    {\r\n      return \"BC\"\r\n    }\r\n    if(p==6)\r\n    {\r\n      return \"CC\"\r\n    }\r\n    if(p==5)\r\n    {\r\n      return \"CD\"\r\n    }\r\n    if(p==4)\r\n    {\r\n      return \"DD\"\r\n    }\r\n    if(p==0)\r\n    {\r\n      return \"FF\"\r\n    }\r\n\r\n  }\r\n\trender(){\r\n\t\treturn(\r\n\t<div className=\"row\">\r\n    <div className=\"col-md-12\">\r\n    <table className=\"table table-striped\" style={{display:this.props.display}}>\r\n    <tr>\r\n    <th>subject</th>\r\n    <th>grade</th>\r\n    <th>Credit</th>\r\n    </tr>\r\n    \r\n    {this.props.data.map((g,index)=>(\r\n      <tr>\r\n      <td>subject{index+1}</td>\r\n      <td>{this.PtoG(g.grade)}</td>\r\n      <td>{g.credit}</td>\r\n      </tr>\r\n      ))}\r\n    \r\n    <tr colspan=\"2\">\r\n    <td>SPI {this.props.spi}</td>\r\n    <td>percentage {this.props.percentage}</td>\r\n   \r\n    </tr>\r\n    </table>\r\n    </div>\r\n    </div>\r\n\t\t\t)\r\n\t}\r\n}\r\nexport default Table;","import React,{Component} from 'react';\nimport Title from './component/title';\nimport Counter from './component/counter';\nimport Form from './component/form';\nimport Table from './component/table';\nclass  App extends Component {\n  state=({\n    grade:[],\n    credit:[],\n    data:[],\n    count:\"\",\n    display:\"none\",\n    displaymsg:\"none\",\n    spi:\"\",\n    percentage:\"\",\n    ing:-1, \n    inc:-1\n  })\n  ongradeChange = (e) =>{\n    let target = e.target;\n    let value = target.value;\n    let name = target.name;\n    let grade =this.state.grade\n    grade.push(value);\n    this.setState({\n      grade:grade,\n      \n    })\n    // console.log(this.state.grade);\n  }\n   oncreditChange = (e) =>\n   {\n\n    if(!isNaN(e.target.value))\n    {\n      let target = e.target;\n      let value = target.value;\n      let name = target.name;\n      let credit = this.state.credit;\n      credit.push(value);\n      this.setState({\n        credit:credit,\n      }) \n    }\n    else\n    {\n      alert(\"Enter only numeric value\"); \n    }\n\n    // console.log(this.state.credit);\n    \n  }\n\n  oncounterChange = (e) =>\n  {\n    if(!isNaN(e.target.value))\n    {\n      this.setState({\n      count:e.target.value,\n      display:\"block\"\n      })\n    }\n    else\n    {\n      alert(\"Please enter only numeric value\");\n    }\n  }\n\n  handlesubmit = (e) => \n  {\n    e.preventDefault(); \n    // console.log(this.state.data)\n    if(!this.state.grade.length || this.state.credit.length < this.state.count)\n    {\n\n     alert(\"Make sure all the values are enter\");\n     return false;\n    }\n\n    else\n    {\n    \n    let count = this.state.count;\n    let gi=0;\n    let data = this.state.data;\n    this.state.credit.map(c=>{\n      gi=parseInt(gi)+parseInt(c);\n      \n    })\n    let ci=0;\n    for(let i=0;i<count;i++)\n    {\n     \n      ci+=this.state.credit[i]*this.state.grade[i];\n      data.push({\n        grade:this.state.grade[i],\n        credit:this.state.credit[i]\n      })\n    }\n    this.setState({\n      data:data\n    })\n    let spi = ci/gi;\n    let percentage = (spi - 0.5) * 10;\n     this.setState({\n      spi:spi.toFixed(2),\n      percentage:percentage.toFixed(2),\n      displaymsg:\"table\"\n     })\n     \n  }\n}\n\n  dynamic = () =>\n  {\n    let frm = [];\n    let final = this.state.count;\n    let nameg = \"gradesub\";\n    let namec = \"subcredit\";\n    \n    for(let i=1;i<=final;i++)\n    {\n      frm.push(\n      <React.Fragment>\n      <div className=\"col-md-3\">\n      <label>Grade of subject{i}</label>\n      <select name={nameg+i} onChange={this.ongradeChange} value={this.state.grade.gradesubi} className=\"form-control\" >\n        <option value={this.state.init}>Select Your Grade</option>\n        <option value=\"10\">AA</option>\n        <option value=\"9\">AB</option>\n        <option value=\"8\">BB</option>\n        <option value=\"7\">BC</option>\n        <option value=\"6\">CC</option>\n        <option value=\"5\">CD</option>\n        <option value=\"4\">DD</option>\n        <option value=\"0\">FF</option>\n      </select>\n      </div>\n      \n      <div className=\"col-md-3\">\n      <div className=\"form-group\">\n      <label>Credit of subject{i}</label>\n      <input type=\"text\" name={namec+i} onChange={this.oncreditChange} value={this.state.subcrediti} className=\"form-control\" />\n      </div>\n      </div>\n      </React.Fragment>\n      \n        )\n\n    }\n    let display = this.state.display;\n    frm.push(<div className=\"col-md-12\"><div className=\"form-group\">\n    <input type=\"submit\" className=\"btn btn-primary\" value=\"Find\" style={{display:display}}/></div></div>);\n    \n    return frm;\n  }\n  handleCreate = (e) =>{\n    e.preventDefault();\n    return  this.dynamic();\n  }\n \n  render(){\n  return (\n    <React.Fragment>\n    <div className=\"container p-5\">\n    <Title />\n    <Counter value={this.state.count} onChange={this.oncounterChange}/>\n    <Form onSubmit={this.handlesubmit} ondynamic={this.dynamic}/>\n    <Table data={this.state.data} spi={this.state.spi} percentage={this.state.percentage} display={this.state.displaymsg}/>\n    </div>\n    </React.Fragment>\n  );\n}}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}